interface Netlighter {
  birthYear: Int!
  firstName: String
  lastName: String
}

type Client {
  assignedConsultants: [Consultant]
  industry: String
  name: String
  office: Office
}

type Clouds {
  all: BigInteger!
}

type Consultant implements Netlighter {
  birthYear: Int!
  client: Client
  firstName: String
  lastName: String
  office: Office
}

type Coord {
  lat: Float!
  lon: Float!
}

type Main {
  feelsLike: Float!
  humidity: BigInteger!
  pressure: BigInteger!
  temp: Float!
  tempMax: Float!
  tempMin: Float!
}

"Mutation root"
type Mutation {
  openNewOffice(office: OfficeInput): Office
}

type Office {
  city: String
  country: String
  name: String
  postalCode: String
}

"Query root"
type Query {
  allOffices: [Office]
  findAllConsultants: [Consultant]
  "find all the client for an office"
  findClientsByOffice(officeName: String): [Client]
  officesByCountry(country: String): [Office]
  weatherForOffice(officeName: String): WeatherResponse
}

type Sys {
  country: String
  id: BigInteger!
  message: Float!
  sunrise: BigInteger!
  sunset: BigInteger!
  type: BigInteger!
}

type Weather {
  description: String
  icon: String
  id: BigInteger!
  main: String
}

type WeatherResponse {
  base: String
  clouds: Clouds
  cod: BigInteger!
  coord: Coord
  dt: BigInteger!
  id: BigInteger!
  main: Main
  name: String
  sys: Sys
  timezone: BigInteger!
  visibility: BigInteger!
  weather: [Weather]
  wind: Wind
}

type Wind {
  deg: BigInteger!
  speed: Float!
}

"Scalar for BigInteger"
scalar BigInteger

input OfficeInput {
  city: String
  country: String
  name: String
  postalCode: String
}
